import { integer } from './basic'
import { getMockable } from '../mockable'
import { defaultTo, isFunction, isTrueObject, pickItems, pickProps } from '../utils'

/**
 * Returns object generated by specified schema
 *
 * @example
 *
 * generate({ name: 'Harrie' })
 * // => { name: 'Harrie' }
 *
 * generate({ name: fullName() })
 * // => { name: '张三' }
 *
 * generate(() => 'Harrie')
 * // => 'Harrie'
 *
 * generate(null)
 * // => null
 */
export function generate (mockable: Function | Object): any {
  if (typeof mockable === 'function') return mockable()
  if (!isTrueObject(mockable)) return mockable

  const result: any = {}

  for (const key in mockable) {
    if (mockable.hasOwnProperty(key)) {
      const invoker = (mockable as any)[key]

      result[key] = typeof invoker === 'function'
        ? invoker.call(result)
        : invoker
    }
  }

  return result
}

/**
 * Returns an array with random length
 *
 * @example
 *
 * array('a')
 * // => ['a']
 *
 * array('a', 3)
 * // => ['a', 'a', 'a']
 *
 * array('a', 3, 5)
 * // => ['a', 'a', 'a', 'a']
 *
 * array({ name: fullName() }, 2)
 * // => [{ name: '张三' }, { name: '李四' }]
 */
export function array<T> (proto: T, length?: number): T extends (...args: any[]) => infer R ? R[] : T[]
export function array<T> (proto: T, min: number, max: number): T extends (...args: any[]) => infer R ? R[] : T[]
export function array<T> (proto: T, n1?: number, n2?: number): T extends (...args: any[]) => infer R ? R[] : T[] {
  const max = defaultTo(n2, defaultTo(n1, 5))
  const min = defaultTo(n1, 2)
  const count = integer(min, max)

  const mockable = isFunction(proto) ? proto : getMockable<any>(proto)
  const results: any = []

  for (let i = 0; i < count; i++) {
    results.push(generate(mockable))
  }

  return results
}

/**
 * Returns an item of list
 *
 * @example
 *
 * oneOf(['a', 'b'. 'c'])
 * // => 'b'
 */
export function oneOf<T> (list: T[]): T {
  const index = integer(0, list.length - 1)

  return list[index]
}

/**
 * Returns new list pick from another list
 *
 * @example
 *
 * manyOf(['a', 'b', 'c'])
 * // => ['b', 'c']
 *
 * manyOf(['a', 'b', 'c', 'd', 'e'], 2)
 * // => ['e', 'b']
 *
 * manyOf(['a', 'b', 'c', 'd', 'e'], 2, 5)
 * // => ['c', 'e', 'a']
 */
export function manyOf<T> (list: T[], length?: number): T[]
export function manyOf<T> (list: T[], min: number, max: number): T[]
export function manyOf<T> (list: T[], n1?: number, n2?: number): T[] {
  const max = defaultTo(n2, defaultTo(n1, list.length))
  const min = defaultTo(n1, 0)
  const count = integer(min, max)

  return pickItems(list, count)
}

/**
 * Returns an object with properties picked from another object
 *
 * @example
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 'name age')
 * // => ({ name: 'Harrie', age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, ['name', 'age'])
 * // => ({ name: 'Harrie', age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 2)
 * // => ({ age: 18 }
 *
 * pick({ name: 'Harrie', age: 18, gender: 'male' }, 1, 2)
 * // => ({ age: 18, gender: 'male' }
 */
export function pick<T> (proto: T, length?: number): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, props: string | string[]): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, min: number, max: number): T extends Object ? Partial<T> : null
export function pick<T> (proto: T, n1?: any, n2?: any): T extends Object ? Partial<T> : null {
  if (!isTrueObject(proto)) return null as any

  const mockable = getMockable(proto)
  const result = generate(mockable)

  const keys = n1 === undefined || typeof n1 === 'number'
  ? manyOf(Object.keys(result), n1, n2)
  : n1

  return pickProps(result, keys) as any
}
